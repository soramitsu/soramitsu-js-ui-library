[class^="el-"]:not(i):not([class*='el-icon']),
[class*="el-"]:not(i):not([class*='el-icon']) {
  font-family: var(--s-font-family-default);
}

html {
  box-sizing: border-box;
  font-feature-settings: var(--s-font-feature-settings-common);
}

*, *:before, *:after {
  box-sizing: border-box;
  margin: 0;
}

.d1 {
  font-size: var(--s-heading0-font-size);
}

/* Typography */
h1, h2, h3, h4, h5, h6,
.h1, .h2, .h3, .h4, .h5, .h6, .h7,
.d2,
.ch1, .ch2,
.p1 {
  @include font-weight(400);
  font-feature-settings: var(--s-font-feature-settings-heading);
}

h1, h2, h3, h4, h5, h6,
.h1, .h2, .h3, .h4, .h5, .h6, .h7,
.d1, .d2,
.ch1, .ch2, .ch3,
.p1, .p2, .p3, .p4 {
  font-family: var(--s-font-family-default);
  font-feature-settings: var(--s-font-feature-settings-heading);
}

h1, h2,
.h1, .h2 {
  letter-spacing: var(--s-letter-spacing-mini);
}

h1,
.h1,
.d1 {
  line-height: var(--s-line-height-mini);
}

h1,
.h1 {
  font-size: var(--s-heading1-font-size);
  line-height: var(--s-line-height-mini);
}

h2,
.h2,
.d2 {
  font-size: var(--s-heading2-font-size);
}

h2, h3,
.h2, .h3,
.d2,
.ch1, .ch2 {
  line-height: var(--s-line-height-small);
}

h3, h4,
.h3, .h4,
.d1 {
  letter-spacing: var(--s-letter-spacing-small);
}

h3,
.h3 {
  font-size: var(--s-heading3-font-size);
}

h4, h5, h6,
.h4, .h5, .h6, .h7 {
  line-height: var(--s-line-height-medium);
}

h4,
.h4 {
  font-size: var(--s-heading4-font-size);
}

h5, h6,
.h5, .h6, .h7,
.d1, .d2,
.ch1, .ch2, .ch3 {
  @include font-weight(700);
}

h5,
.h5,
.p1 {
  font-size: var(--s-heading5-font-size);
  letter-spacing: var(--s-letter-spacing-big);
}

h5,
.h5,
.ch1 {
  letter-spacing: var(--s-letter-spacing-big);
}

h6,
.h6,
.ch1,
.p2,
.p3 {
  font-size: var(--s-heading6-font-size);
}

.h7,
.ch2,
.p4 {
  font-size: var(--s-heading7-font-size);
}

.ch1, .ch2, .ch3 {
  text-transform: uppercase;
}

.ch2 {
  letter-spacing: var(--s-letter-spacing-large);
}

.ch3 {
  letter-spacing: var(--s-letter-spacing-extra-large);
  line-height: var(--s-line-height-base);
  font-size: var(--s-heading8-font-size);
  font-feature-settings: var(--s-font-feature-settings-caps);
}

.p1 {
  line-height: 1.7; // TODO: think about this case
}

.p2 {
  @include font-weight(600);
}

.p2, .p3, .p4 {
  line-height: var(--s-line-height-big);
}

.s-flex {
  display: flex;
}

.s-bold {
  @include font-weight(700);
}

.s-big {
  height: var(--s-size-big);
}

.s-medium {
  height: var(--s-size-medium);
}

.s-small {
  height: var(--s-size-small);
}

.s-mini {
  height: var(--s-size-mini);
}

.s-border-radius-big {
  border-radius: var(--s-border-radius-big);
}

.s-border-radius-medium {
  border-radius: var(--s-border-radius-medium);
}

.s-border-radius-small {
  border-radius: var(--s-border-radius-small);
}

.s-border-radius-mini {
  border-radius: var(--s-border-radius-mini);
}

button > span {
  position: relative;
}

@mixin res($key, $map: $--breakpoints) {
  @if map-has-key($map, $key) {
    @media only screen and #{inspect(map-get($map, $key))} {
      @content;
    }
  } @else {
    @warn "Undefeined points: `#{$map}`";
  }
}

@mixin utils-clearfix {
  $selector: &;
  @at-root {
    #{$selector}::before,
    #{$selector}::after {
      display: table;
      content: "";
    }
    #{$selector}::after {
      clear: both;
    }
  }
}

.el-message-box {
  & & {
    &__header {
      .el-message-box__title {
        color: var(--s-color-base-content-primary);
        font-size: var(--s-heading5-font-size);
      }
    }
    &__btns {
      button.el-button.el-button--default.el-button--small {
        height: $s-size-medium;
        font-size: var(--s-font-size-small);
        border-radius: var(--s-border-radius-mini);
        &:hover, &:active, &:focus {
          color: var(--s-color-theme-accent);
          background-color: var(--s-color-base-on-accent);
          border-color: var(--s-color-theme-accent);
        }
        &.el-button--primary {
          &:hover, &:active, &:focus {
            color: var(--s-color-base-on-accent);
          }
          &:hover {
            background-color: var(--s-color-theme-accent-hover);
            border-color: var(--s-color-theme-accent-hover);
          }
          &:active {
            background-color: var(--s-color-theme-accent-pressed);
            border-color: var(--s-color-theme-accent-pressed);
          }
          &:focus {
            background-color: var(--s-color-theme-accent-focused);
            border-color: var(--s-color-theme-accent-focused);
          }
        }
      }
    }
  }
}
