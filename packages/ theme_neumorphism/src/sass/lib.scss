@use './tokens';
@use './util';
@use 'sass:list';

$vars-prefix: '--sora_';
$typography-prefix: 'sora-tpg-';

$tokens-compiled: util.tree-flatten(tokens.$tokens);
$tokens-compiled: util.map-filter-non-null-values($tokens-compiled);
$tokens-compiled: util.give-names-to-tokens($tokens-compiled, $vars-prefix);

@function token($id) {
  @if not map-has-key($tokens-compiled, $id) {
    @error "Cannot resolve token with id #{inspect($id)}";
  }

  @return map-get($tokens-compiled, $id);
}

@function token-as-var($id) {
  $value: token($id);
  @return var($value);
}

@mixin eval-tokens($values-map) {
  @include util.eval-tokens($tokens-compiled, $values-map);
}

@mixin eval-tokens-partial($partial-values-map) {
  @include util.eval-tokens($tokens-compiled, $partial-values-map, true);
}

@mixin tokens-preset-light() {
  @include eval-tokens(
    (
      ref: (
        'color': (
          'button': (
            'color-utility-surface': #FDF7FB,
            'color-base-on-accent': #FFFFFF,
            'color-base-content-tertiary': #D5CDD0,
            'color-base-content-secondary': #A19A9D,
            'color-utility-body': #F7F3F4,
            'color-theme-accent': #F8087B,
          ),
        ),
      ),
      sys: (
        'color': (
          'button': (
            'primary': (
              'background-color': token('ref.color.button.color-theme-accent'),
              'background-color-hover': #F754A3,
              'background-color-pressed': #E44592,
              'background-color-alternative': #44E5B2,
              'background-color-alternative-active': #24DAA0,
              'text-color': token('ref.color.button.color-base-on-accent'),
              'text-color-hover': token('ref.color.button.color-base-on-accent'),
              'text-color-pressed': token('ref.color.button.color-base-on-accent'),
              'border-color': #EDE4E7,
              'border-color-hover': token('ref.color.button.color-utility-surface'),
              'border-color-pressed': token('ref.color.button.color-utility-surface'),
            ),
            'secondary': (
              'background-color': token('ref.color.button.color-base-content-tertiary'),
              'background-color-active': token('ref.color.button.color-base-content-secondary'),
              'background-color-alternative': token('ref.color.button.color-utility-body'),
              'background-color-alternative-active': token('ref.color.button.color-base-content-tertiary'),
              'text-color': token('ref.color.button.color-base-on-accent'),
              'text-color-active': #FFFFFF,
              'text-color-alternative': #A19A9D,
              'text-color-alternative-active': #FFFFFF,
            ),
          ),
        ),
        'border': (
          'button': (
            'width': 2px,
            'style': solid,
          )
        ),
        'transition': (
          'button': all 0.25s ease-in-out
        ),
        'shadow': (
          'button': (
            'primary': (
              'box-shadow': (1px 1px 5px rgba(255, 255, 255, 1),
                -1px -1px 5px rgba(255, 255, 255, 1)),
              'box-shadow-hover': (1px 1px 5px rgba(255, 255, 255, 0.7),
                -1px -1px 5px rgba(255, 255, 255, 1),
                0px 0px 20px rgba(247, 84, 163, 0.5)),
              'box-shadow-pressed': (1px 1px 5px rgba(255, 255, 255, 0.7),
                  -1px -1px 5px rgba(255, 255, 255, 1),
                  0px 0px 20px rgba(247, 84, 163, 0.5))
            ),
            'secondary': (
              'box-shadow': (-5px -5px 10px rgba(255, 255, 255, 1),
                1px 1px 10px rgba(0, 0, 0, 0.1),
                inset 1px 1px 2px rgba(255, 255, 255, 0.8)),

              'box-shadow-active': (1px 1px 5px rgba(255, 255, 255, 1),
                inset -5px -5px 5px rgba(255, 255, 255, 0.5),
                inset 1px 1px 10px rgba(0, 0, 0, 0.1)),

              'box-shadow-alternative': (-5px -5px 10px rgba(255, 255, 255, 1),
                1px 1px 10px rgba(0, 0, 0, 0.1),
                inset 1px 1px 2px rgba(255, 255, 255, 0.8))
            ),
          )
        ),
      ),
    ),
  );
}

@mixin typography($id) {
  @if list.index(tokens.$typography-tokens, $id) == null {
    @error "Wrong typography token: #{inspect($id)}";
  }

  .#{$typography-prefix}#{$id} {
    @content;
  }
}

@mixin typography-preset-default() {
  @include typography('d1') {
    @include util.typography-factory($size: 40px, $height: 120%, $spacing: -0.02em, $weight: bold);
  }

  @include typography('d2') {
    @include util.typography-factory($size: 30px, $height: 130%, $spacing: -0.04em, $weight: bold);
  }

  @include typography('h1') {
    @include util.typography-factory($size: 36px, $height: 120%, $spacing: -0.04em);
  }

  @include typography('h2') {
    @include util.typography-factory($size: 30px, $height: 130%, $spacing: -0.04em);
  }

  @include typography('h3') {
    @include util.typography-factory($size: 24px, $height: 130%, $spacing: -0.02em);
  }

  @include typography('h4') {
    @include util.typography-factory($size: 18px, $height: 150%, $spacing: -0.02em);
  }

  @include typography('h4-bold') {
    @include util.typography-factory($size: 18px, $height: 150%, $spacing: 0, $weight: bold);
  }

  @include typography('h5') {
    @include util.typography-factory($size: 16px, $height: 150%, $spacing: 0.01em, $weight: bold);
  }

  @include typography('h6') {
    @include util.typography-factory($size: 14px, $height: 150%, $weight: bold);
  }

  @include typography('h7') {
    @include util.typography-factory($size: 12px, $height: 150%, $weight: bold);
  }

  @include typography('ch1') {
    @include util.typography-factory($size: 14px, $height: 130%, $spacing: 0.01em, $weight: bold);
    text-transform: uppercase;
  }

  @include typography('ch2') {
    @include util.typography-factory($size: 12px, $height: 130%, $spacing: 0.03em, $weight: bold);
    text-transform: uppercase;
  }

  @include typography('ch3') {
    @include util.typography-factory($size: 10px, $height: 140%, $spacing: 0.06em, $weight: bold);
    text-transform: uppercase;
  }

  @include typography('p1') {
    @include util.typography-factory($size: 16px, $height: 170%);
  }

  @include typography('p2') {
    @include util.typography-factory($size: 14px, $height: 180%, $weight: 600);
  }

  @include typography('p3') {
    @include util.typography-factory($size: 14px, $height: 180%);
  }

  @include typography('p4') {
    @include util.typography-factory($size: 12px, $height: 180%);
  }

  @include typography('p5') {
    @include util.typography-factory($size: 10px, $height: 160%);
  }

  @include typography('s1') {
    @include util.typography-factory($size: 15px, $height: 16px);
  }
}
